#!/usr/bin/env ruby
#
#  Author: Charles Sutton <csutton@inf.ed.ac.uk>
#  Created: 2008-03-03.
#  Copyright (c) 2008. All rights reserved.

$CURRENT_DIR = "FOOBAR"

require 'bibout'
require 'optparse'

options = { :template => nil, :output_file => nil }

opts = OptionParser.new

opts.banner = "Usage: bibout [options] <bibfile>"
opts.on("-tMANDATORY", "--template MANDATORY", "Name of template file") do |tmpl|
  options[:template] = tmpl
end
opts.on("-oFILENAME", "--output FILE_NAME", "Name of output file (if unspecified, uses stdout)") do |ofile|
  options[:output_file] = ofile
end
opts.on("-dDIRECTORY", "--directory DIR", "Base directory for embed() calls in template (default: directory of template)") do |dir|
  options[:dir] = dir
end
opts.on("-r", "--require module1,...,moduleN", Array, "Ruby modules to require before running templates") do |r|
  options[:require_list] = r
end
opts.on_tail("-h", "--help", "Show this message") do
  puts opts
  exit
end
opts.parse!

bibfile = ARGV[0]

if options[:template].nil? 
  puts "Error: Missing template file"
  puts opts
  abort
end
if bibfile.nil? 
  puts "Error: Missing BibTeX file"
  puts opts
  abort
end
if not options[:require_list].nil?
  options[:require_list].each { |x| require x }
end

#########################################################################

bib = BibTeX.open(bibfile, :filter => :latex)
bib.replace # substitute all @string mentions

result = BibOut.new(options[:dir]).process_file(bib, options[:template])

if options[:output_file].nil?
  print (result)
else
  File.open(options[:output_file], "w") { |outf| outf << result }
end

